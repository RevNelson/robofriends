{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/MainPage.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","nextProps","nextState","_this2","react_default","a","createElement","id","color","onClick","setState","Component","Header","className","components_CounterButton","Card","_ref","name","email","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundry","hasError","error","info","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","_this$props","onSearchChange","isPending","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","App","src_components_MainPage","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initalStateSearch","initalStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0462ad79.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <button \n        id='counter'\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton />\n      </div>\n    );\n  }\n};\n\nexport default Header;","import React from 'react';\n\n// TODO - Lazy Load images && Handle errors\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='RoboPic' src={`https://robohash.org/${id}?size=100x100`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={robots[i].id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                id='searchfield'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That's not good...</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry","import React, { Component } from 'react';\nimport Header from './Header';\nimport CardList from \"../components/CardList\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './MainPage.css';\n\n\nclass MainPage extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n    });\n  }\n\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return isPending ?\n    <h1 className='tc'>Loading</h1> :\n    (\n       <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                  <ErrorBoundry>\n                    <CardList robots={this.filterRobots()} />\n                  </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default MainPage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport MainPage from '../components/MainPage';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  } \n}\n\n\nclass App extends Component {\n  render() { return <MainPage { ...this.props }/> }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  return fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response =>  response.json())\n            .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n            .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initalStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initalStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn { ...state, searchField: action.payload }\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initalStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initalStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t  return { ...state, isPending: true }\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t  return { ...state, robots: action.payload, isPending: false }\n        case REQUEST_ROBOTS_FAILED:\n          return { ...state, error: action.payload, isPending: false }\n        default:\n          return state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App /> \n\t</Provider>, document.getElementById('root'));\n\n\t// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}